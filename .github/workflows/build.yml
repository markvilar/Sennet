name: Build

on: 
  push:
  pull_request:
    branches: [master]

defaults:
  run:
    shell: bash

env:
  build_dir: ./build

jobs:
  build:
    name: >
      ${{ matrix.os }}-${{ matrix.compiler.c }}-${{ matrix.build_type }}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: { c: gcc-9, cpp: g++-9 }
            generator: Ninja
            build_type: Release

          - os: ubuntu-latest
            compiler: { c: gcc-10, cpp: g++-10 }
            generator: Ninja
            build_type: Release

          - os: ubuntu-latest
            compiler: { c: clang-11, cpp: clang++-11 }
            generator: Ninja
            build_type: Release

          - os: ubuntu-latest
            compiler: { c: clang-12, cpp: clang++-12 }
            generator: Ninja
            build_type: Release

        # TODO: Add tarets to build matrix.

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Echo build configuration
      run: |
        echo "OS:           ${{ matrix.os }}"
        echo "Generator:    ${{ matrix.generator }}"
        echo "C Compiler:   ${{ matrix.compiler.c }}"
        echo "C++ Compiler: ${{ matrix.compiler.cpp }}"
        echo "Build type:   ${{ matrix.build_type }}"


    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64

    - name: Set up GCC
      if: runner.os == 'linux'
      uses: egor-tensin/setup-gcc@v1
      with:
        version: latest
        platform: x64

    - name: Set up MinGW
      if: runner.os == 'windows'      
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64

    - name: Install Linux dependencies
      if: runner.os == 'linux'
      run: |
        sudo apt update -y
        sudo apt install -y libgl-dev 
        sudo apt install -y ninja-build
        pip3 install wheel setuptools
        pip3 install conan
        export PATH=$PATH:~/.local/bin

    - name: Install Windows dependencies
      if: runner.os == 'windows'
      run: |
        choco install -y ninja
        pip3 install wheel setuptools
        pip3 install conan

    - name: Install packages
      run: >
        conan install . 
        --install-folder ${{ env.build_dir }} 
        --settings build_type=${{ matrix.build_type }}
        --build missing

    - name: Generate build
      run: >
        cmake 
        -S .
        -B ${{ env.build_dir }}
        -G ${{ matrix.generator }} 
        -D CMAKE_C_COMPILER=${{ matrix.compiler.c }}
        -D CMAKE_CXX_COMPILER=${{ matrix.compiler.cpp }}
        -D CMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build ${{ env.build_dir }}
