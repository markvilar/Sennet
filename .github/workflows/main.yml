name: main

on: 
  push:
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

env:
  source_dir: "${{github.workspace}}"
  build_dir: "${{github.workspace}}/build"

jobs:
  build:
    name: "${{matrix.os}}-${{matrix.compiler.c}}-${{matrix.build_type}}"
    runs-on: "${{matrix.os}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: { c: gcc, cpp: g++ }
            generator: Ninja
            build_type: Release
            platform: x64

          - os: ubuntu-latest
            compiler: { c: clang, cpp: clang++ }
            generator: Ninja
            build_type: Release
            platform: x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Echo build configuration
      run: |
        echo "OS:           ${{matrix.os}}"
        echo "Generator:    ${{matrix.generator}}"
        echo "C Compiler:   ${{matrix.compiler.c}}"
        echo "C++ Compiler: ${{matrix.compiler.cpp}}"
        echo "Build type:   ${{matrix.build_type}}"

    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: ${{matrix.platform}}

    - name: Set up GCC
      if: runner.os == 'linux'
      uses: egor-tensin/setup-gcc@v1
      with:
        version: latest
        platform: ${{matrix.platform}}

    - name: Set up MinGW
      if: runner.os == 'windows'      
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: ${{matrix.platform}}

    - name: Install Linux dependencies
      if: runner.os == 'linux'
      run: |
        sudo apt update -y
        sudo apt install -y \
            cmake \
            gcc \
            clang \
            ninja-build \
            python3-dev \
            python3-pip \
            pkg-config \
            libgl-dev \
            libx11-xcb-dev \
            libx11-xcb-dev \
            libfontenc-dev \
            libice-dev \
            libsm-dev \
            libxaw7-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxi-dev \
            libxinerama-dev \
            libxkbfile-dev \
            libxmuu-dev \
            libxrandr-dev \
            libxres-dev \
            libxss-dev \
            libxtst-dev \
            libxv-dev \
            libxvmc-dev \
            libxxf86vm-dev \
            libxcb-render0-dev \
            libxcb-render-util0-dev \
            libxcb-xkb-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-shape0-dev \
            libxcb-sync-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-dri3-dev \
            uuid-dev \
            libxcb-util-dev \
            libxcb-util0-dev 
        pip3 install wheel setuptools
        pip3 install conan
        export PATH=$PATH:~/.local/bin

    - name: Generate build
      run: |
        export CMAKE_GENERATOR="${{matrix.generator}}"
        export CMAKE_C_COMPILER="${{matrix.compiler.c}}"
        export CMAKE_CXX_COMPILER="${{matrix.compiler.cpp}}"
        cmake \
          -S ${{env.source_dir}} \
          -B ${{env.build_dir}} \
          -D CMAKE_BUILD_TYPE=${{env.build_type}} \
          -D PINE_BUILD_EDITOR=ON \
          -D PINE_BUILD_EXAMPLES=ON

    - name: Build
      run: cmake --build ${{env.build_dir}}

    - name: Create conan package
      run: conan create ${{env.source_dir}} --build missing
